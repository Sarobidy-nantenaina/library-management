openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD21084
servers:
  - url: https://library.com
tags:
  - name: Books
    description: Operations related to books
  - name: Authors
    description: Operations related to authors
  - name: Visitors
    description: Operations related to visitors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          $ref: '#/components/responses/responseBooks_200'
        400:
          $ref: '#/components/responses/response_400'
        403:
          $ref: '#/components/responses/response_403'
        500:
          $ref: '#/components/responses/response_500'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          $ref: '#/components/responses/responseBooks_200'
        400:
          $ref: '#/components/responses/response_400'
        403:
          $ref: '#/components/responses/response_403'
        500:
          $ref: '#/components/responses/response_500'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Edit a specific Author for a Book
      operationId: CrupdateAuthorForBook
      parameters:
        - in: path
          name: bookId
          required: true
          description: ID of the book to be edited
          schema:
            type: string
        - in: path
          name: authorId
          required: true
          description: ID of the author to be edited
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/responseBook_200'
        400:
          $ref: '#/components/responses/response_400'
        403:
          $ref: '#/components/responses/response_403'
        500:
          $ref: '#/components/responses/response_500'
  /books/authors:
    put:
      tags:
        - Books
      summary: update all authors from all books
      operationId: UpdateAuthorsFromBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateAuthorsBooks'
      responses:
        200:
          $ref: '#/components/responses/responseBooks_200'
        400:
          $ref: '#/components/responses/response_400'
        403:
          $ref: '#/components/responses/response_403'
        500:
          $ref: '#/components/responses/response_500'
  /books/borrowed:
    get:
      tags:
        - Books
      summary: Get Borrowed Books
      description: Retrieves the list of borrowed books.
      operationId: getBorrowedBooks
      responses:
        '200':
          description: List of borrowed books retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowedBooksResponse'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'
  /books/available:
    get:
      tags:
        - Books
      summary: Get Available Books
      description: Retrieves the list of available books.
      operationId: getAvailableBooks
      responses:
        '200':
          description: List of available books retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvailableBooksResponse'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'
  /books/import:
    post:
      tags:
        - Books
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BookImportJson'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BookImportExcel'
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /authors/page/{pathPage}/pageSize/{pathPageSize}:
    parameters:
      - $ref: '#/components/parameters/pathPage'
      - $ref: '#/components/parameters/pathPageSize'
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          $ref: '#/components/responses/responseAuthors_200'
        400:
          $ref: '#/components/responses/response_400'
        403:
          $ref: '#/components/responses/response_403'
        500:
          $ref: '#/components/responses/response_500'
  /authors:
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/responseAuthors_200'
        400:
          $ref: '#/components/responses/response_400'
        403:
          $ref: '#/components/responses/response_403'
        500:
          $ref: '#/components/responses/response_500'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/responses/responseAuthor_200'
        400:
          $ref: '#/components/responses/response_400'
        403:
          $ref: '#/components/responses/response_403'
        500:
          $ref: '#/components/responses/response_500'
  /authors/delete:
    delete:
      summary: Delete multiple authors
      operationId: deleteMultipleAuthors
      tags:
        - Authors
      parameters:
        - in: query
          name: authorIds
          description: IDs of the authors to be deleted
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          $ref: '#/components/responses/responseAuthors_200'
        400:
          $ref: '#/components/responses/response_400'
        403:
          $ref: '#/components/responses/response_403'
        500:
          $ref: '#/components/responses/response_500'

  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        content:
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthorImportExcel'
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthorImportJson'
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /visitors:
    post:
      tags:
        - Visitors
      summary: Add a Visitor
      description: Adds a new visitor to the library.
      operationId: addVisitor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVisitor'
      responses:
        '200':
          description: Visitor added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visitor'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'
    get:
      tags:
        - Visitors
      summary: Get All Visitors
      description: Retrieves the list of all visitors.
      operationId: getAllVisitors
      responses:
        '200':
          description: List of visitors retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorsListResponse'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'
  /visitors/{visitorId}:
    get:
      tags:
        - Visitors
      summary: Get Visitor by ID
      description: Retrieves a visitor by their ID.
      operationId: getVisitorById
      parameters:
        - in: path
          name: visitorId
          required: true
          description: ID of the visitor to retrieve.
          schema:
            type: string
      responses:
        '200':
          description: Visitor retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleVisitorResponse'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'
    put:
      tags:
        - Visitors
      summary: Update Visitor
      description: Updates a visitor by their ID.
      operationId: updateVisitor
      parameters:
        - in: path
          name: visitorId
          required: true
          description: ID of the visitor to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVisitorRequest'
      responses:
        '200':
          description: Visitor updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleVisitorResponse'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'
  /visitors/{visitorId}/borrow:
    post:
      tags:
        - Visitors
      summary: Borrow a Book
      description: Allows a visitor to borrow a book.
      operationId: borrowBook
      parameters:
        - in: path
          name: visitorId
          required: true
          description: ID of the visitor borrowing the book.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BorrowBookRequest'
      responses:
        '200':
          description: Book borrowed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowResponse'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'
  /visitors/{visitorId}/return:
    post:
      tags:
        - Visitors
      summary: Return a Book
      description: Allows a visitor to return a borrowed book.
      operationId: returnBook
      parameters:
        - in: path
          name: visitorId
          required: true
          description: ID of the visitor returning the book.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReturnBookRequest'
      responses:
        '200':
          description: Book returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnBookResponse'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'
  /visitors/{visitorId}/activities:
    get:
      tags:
        - Visitors
      summary: Get Visitor Activities
      description: Retrieves the activities of a visitor over a specified period.
      operationId: getVisitorActivities
      parameters:
        - in: path
          name: visitorId
          required: true
          description: ID of the visitor to retrieve activities for.
          schema:
            type: string
        - in: query
          name: period
          required: true
          description: The period for which to retrieve activities (e.g., 1 month, 1 week, specific hour interval).
          schema:
            type: string
      responses:
        '200':
          description: Visitor activities retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VisitorActivitiesResponse'
        '400':
          $ref: '#/components/responses/response_400'
        '403':
          $ref: '#/components/responses/response_403'
        '500':
          $ref: '#/components/responses/response_500'

components:
  schemas:
    CreateVisitor:
      type: object
      properties:
        name:
          type: string
        reference:
          type: string
    Visitor:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        reference:
          type: string
    VisitorsListResponse:
      type: object
      properties:
        visitors:
          type: array
          items:
            $ref: '#/components/schemas/Visitor'
    UpdateVisitorRequest:
      type: object
      properties:
        name:
          type: string
        reference:
          type: string
    SingleVisitorResponse:
      type: object
      properties:
        visitor:
          $ref: '#/components/schemas/Visitor'
    BorrowBookRequest:
      type: object
      properties:
        bookId:
          type: string
    BorrowResponse:
      type: object
      properties:
        borrower:
          $ref: '#/components/schemas/Visitor'
        borrowed_book:
          $ref: '#/components/schemas/Book'
    ReturnBookRequest:
      allOf:
        - $ref: '#/components/schemas/BorrowBookRequest'
    ReturnBookResponse:
      allOf:
        - $ref: '#/components/schemas/BorrowResponse'
    VisitorActivitiesResponse:
      type: object
      properties:
        activities:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
    Activity:
      type: object
      properties:
        activityId:
          type: string
        bookId:
          type: string
        action:
          type: string
          enum:
            - BORROWED
            - RETURNED
        date_time:
          type: string
          format: date-time
    AvailableBooksResponse:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'

    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    EditAuthorBook:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - $ref: '#/components/schemas/Author'
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/Author'
    BorrowedBooksResponse:
      type: object
      properties:
        books:
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    DeleteAuthors:
      type: object
      properties:
        authorId:
          type: string
    Sex:
      type: string
      enum:
        - M
        - F
    UpdateAuthorsBooks:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    BookImportJson:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string

    BookImportExcel:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string

    AuthorImportJson:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'

    AuthorImportExcel:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    StatusResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: OK
    TemplateResponse:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/StatusResponse'
        body:
          type: object
    BookListBody:
      allOf:
        - $ref: '#/components/schemas/TemplateResponse'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    SingleBookBody:
      allOf:
        - $ref: '#/components/schemas/TemplateResponse'
        - properties:
            body:
              $ref: '#/components/schemas/EditAuthorBook'
    AuthorListBody:
      allOf:
        - $ref: '#/components/schemas/TemplateResponse'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Author'
    SingleAuthorBody:
      allOf:
        - $ref: '#/components/schemas/TemplateResponse'
        - properties:
            body:
              $ref: '#/components/schemas/Author'
    BadRequestBody:
      allOf:
        - $ref: '#/components/schemas/TemplateResponse'
      example:
        status:
          code: 400
          message: BAD REQUEST
        body: {}
    ForbiddenBody:
      allOf:
        - $ref: '#/components/schemas/TemplateResponse'
      example:
        status:
          code: 403
          message: FORBIDDEN
        body: { }
    ServerErrorBody:
      allOf:
        - $ref: '#/components/schemas/TemplateResponse'
      example:
        status:
          code: 500
          message: INTERNAL SERVER ERROR
        body: { }
  responses:
    responseBooks_200:
      description: List of books
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BookListBody'
    responseBook_200:
      description: The updated book with the edited author
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SingleBookBody'
    responseAuthors_200:
      description: List of authors
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthorListBody'
    responseAuthor_200:
      description: an author
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SingleAuthorBody'

    response_400:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestBody'
    response_403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ForbiddenBody'
    response_500:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServerErrorBody'

  parameters:
#    2eme facon de faire la pagination
#    queryPagination:
#      name: queryPagination
#      in: query
#      required: false
#      schema:
#        type: object
#        properties:
#          page:
#            type: integer
#            default: 1
#          pageSize:
#            type: integer
#            default: 50
#    pathPagination:
#      name: pathPagination
#      in: path
#      required: true
#      schema:
#        type: object
#        properties:
#          page:
#            type: integer
#            default: 1
#          pageSize:
#            type: integer
#            default: 50
#   1ere facon de faire la pagination
    queryPage:
      in: query
      name: queryPage
      required: false
      schema:
        type: integer
        default: 1
    queryPageSize:
      in: query
      name: queryPageSize
      required: true
      schema:
        type: integer
        default: 50
    pathPage:
      in: path
      name: queryPage
      required: true
      schema:
        type: integer
        default: 1
    pathPageSize:
      in: path
      name: queryPageSize
      required: false
      schema:
        type: integer
        default: 50



  
    
