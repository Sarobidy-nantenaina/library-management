openapi: 3.0.3
info:
  title: Library API
  version: 1.3.0
  description: STD21084
servers:
  - url: https://library.com
tags:
  - name: Books
    description: Operations related to books
  - name: Authors
    description: Operations related to authors
paths:
  /books:
    get:
      tags:
        - Books
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateMin
          description: |
            If  `releaseDateMax` is not provided, `releaseDateMin` is ignored.
            `releaseDateMin` can not be after `releaseDateMax`.
          schema:
            type: string
            format: date
          required: false
        - in: query
          name: releaseDateMax
          description: |
            If  `releaseDateMin` is not provided, `releaseDateMax` is ignored.
            `releaseDateMax` can not be after `releaseDateMin`.
          schema:
            type: string
            format: date
          required: false
        - $ref: '#/components/parameters/queryPagination'
      responses:
        200:
          description: Successful response with Book
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/CrupdateBook'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
    put:
      tags:
        - Books
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - Books
      summary: Edit a specific Author for a Book
      operationId: CrupdateAuthorForBook
      parameters:
        - in: path
          name: bookId
          required: true
          description: ID of the book to be edited
          schema:
            type: string
        - in: path
          name: authorId
          required: true
          description: ID of the author to be edited
          schema:
            type: string
      responses:
        200:
          description: The updated book with the edited author
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        $ref: '#/components/schemas/EditAuthorBook'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /books/authors:
    put:
      tags:
        - Books
      summary: update all authors from all books
      operationId: UpdateAuthorsFromBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateAuthorsBooks'
      responses:
        200:
          description: Return all authors updated from all books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/EditAuthorBook'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /books/import:
    post:
      tags:
        - Books
      summary: Import books from Excel or JSON
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BookImportJson'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BookImportExcel'
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /authors/{pathPagination}:
    parameters:
      - name: pathPagination
        $ref: '#/components/parameters/pathPagination'
    get:
      summary: Get all authors
      operationId: getAuthors
      tags:
        - Authors
      parameters:
        - name: authorName
          in: query
          description: |
            Filter returned authors by given name. 
            If not provided, then list is not filtered.
          schema:
            type: string
          required: false
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /authors:
    put:
      summary: Create or update authors
      operationId: crupdateAuthors
      tags:
        - Authors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The list of created or updated authors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /authors/{aId}:
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: aId
          in: path
          description: Author identifier to be deleted
          schema:
            type: string
          required: true
      responses:
        200:
          description: The author deleted
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
  /authors/delete:
    delete:
      summary: Delete multiple authors
      operationId: deleteMultipleAuthors
      tags:
        - Authors
      parameters:
        - in: query
          name: authorIds
          description: IDs of the authors to be deleted
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: The authors have been deleted successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'

  /authors/import:
    post:
      tags:
        - Authors
      summary: Import authors from Excel or JSON
      operationId: importAuthors
      requestBody:
        content:
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthorImportExcel'
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/AuthorImportJson'
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessfulResponse'
                  - type: object
                    properties:
                      body:
                        type: array
                        items:
                          $ref: '#/components/schemas/Author'
        400:
          $ref: '#/components/schemas/BadRequestResponse'
        403:
          $ref: '#/components/schemas/ForbiddenResponse'
        500:
          $ref: '#/components/schemas/InternalServerErrorResponse'
components:
  schemas:
    CrupdateBook:
      type: object
      properties:
        id:
          type: string
        bookName:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
    EditAuthorBook:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - $ref: '#/components/schemas/Author'
    Book:
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - type: object
          properties:
            author:
              $ref: '#/components/schemas/Author'
    Author:
      type: object
      properties:
        id:
          type: string
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
    DeleteAuthors:
      type: object
      properties:
        authorId:
          type: string
    Sex:
      type: string
      enum:
        - M
        - F
    UpdateAuthorsBooks:
      type: object
      properties:
        bookId:
          type: string
        authorId:
          type: string
    Response:
      type: object
      properties:
        status:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
        body:
          type: object
    SuccessfulResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            status:
              properties:
                code:
                  type: integer
                  enum: [ 200 ]
                message:
                  type: string
                  default: "Success"
            body:
              type: object
              properties:
                success:
                  type: string
                  description: Action Successfully
    BadRequestResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            status:
              properties:
                code:
                  type: integer
                  enum: [ 400 ]
                message:
                  type: string
                  default: "Bad Request"
            body:
              type: object
              properties:
                error:
                  type: string
                  description: The server cannot understand the request due to incorrect syntax or malformed data.
    ForbiddenResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            status:
              properties:
                code:
                  type: integer
                  enum: [ 403 ]
                message:
                  type: string
                  default: "Forbidden"
            body:
              type: object
              properties:
                error:
                  type: string
                  description: Unauthorized access to the resource due to insufficient permissions.
    InternalServerErrorResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            status:
              properties:
                code:
                  type: integer
                  enum: [ 500 ]
                message:
                  type: string
                  default: "Internal Server Error"
            body:
              type: object
              properties:
                error:
                  type: string
                  description: An unexpected condition was encountered on the server side and no specific error information is available at the moment.
    BookImportJson:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string

    BookImportExcel:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string

    AuthorImportJson:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'

    AuthorImportExcel:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
  parameters:
    queryPagination:
      name: queryPagination
      in: query
      required: false
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
    pathPagination:
      name: pathPagination
      in: path
      required: true
      schema:
        type: object
        properties:
          page:
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50



  
    
